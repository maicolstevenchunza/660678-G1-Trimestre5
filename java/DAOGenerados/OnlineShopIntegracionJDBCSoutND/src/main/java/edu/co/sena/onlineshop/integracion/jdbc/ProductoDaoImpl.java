/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.onlineshop.integracion.jdbc;

import edu.co.sena.onlineshop.integracion.dao.*;
import edu.co.sena.onlineshop.integracion.factory.*;
import java.util.Date;
import edu.co.sena.onlineshop.integracion.dto.*;
import edu.co.sena.onlineshop.integracion.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProductoDaoImpl extends AbstractDAO implements ProductoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PRODUCTO, NOMBRE_PRODUCTO, PRECIO, IMAGEN, CANTIDAD, ACTIVO, FECHA_CREACION, USUARIO_CREACION, FECHA_ULTIMA_MODIFICACION, USUARIO_ULTIMA_MODIFICACION, CATEGORIA_ID_CATEGORIA, CATALOGO_ID_CATALOGO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PRODUCTO, NOMBRE_PRODUCTO, PRECIO, IMAGEN, CANTIDAD, ACTIVO, FECHA_CREACION, USUARIO_CREACION, FECHA_ULTIMA_MODIFICACION, USUARIO_ULTIMA_MODIFICACION, CATEGORIA_ID_CATEGORIA, CATALOGO_ID_CATALOGO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PRODUCTO = ?, NOMBRE_PRODUCTO = ?, PRECIO = ?, IMAGEN = ?, CANTIDAD = ?, ACTIVO = ?, FECHA_CREACION = ?, USUARIO_CREACION = ?, FECHA_ULTIMA_MODIFICACION = ?, USUARIO_ULTIMA_MODIFICACION = ?, CATEGORIA_ID_CATEGORIA = ?, CATALOGO_ID_CATALOGO = ? WHERE ID_PRODUCTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_PRODUCTO = ?";

	/** 
	 * Index of column ID_PRODUCTO
	 */
	protected static final int COLUMN_ID_PRODUCTO = 1;

	/** 
	 * Index of column NOMBRE_PRODUCTO
	 */
	protected static final int COLUMN_NOMBRE_PRODUCTO = 2;

	/** 
	 * Index of column PRECIO
	 */
	protected static final int COLUMN_PRECIO = 3;

	/** 
	 * Index of column IMAGEN
	 */
	protected static final int COLUMN_IMAGEN = 4;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 5;

	/** 
	 * Index of column ACTIVO
	 */
	protected static final int COLUMN_ACTIVO = 6;

	/** 
	 * Index of column FECHA_CREACION
	 */
	protected static final int COLUMN_FECHA_CREACION = 7;

	/** 
	 * Index of column USUARIO_CREACION
	 */
	protected static final int COLUMN_USUARIO_CREACION = 8;

	/** 
	 * Index of column FECHA_ULTIMA_MODIFICACION
	 */
	protected static final int COLUMN_FECHA_ULTIMA_MODIFICACION = 9;

	/** 
	 * Index of column USUARIO_ULTIMA_MODIFICACION
	 */
	protected static final int COLUMN_USUARIO_ULTIMA_MODIFICACION = 10;

	/** 
	 * Index of column CATEGORIA_ID_CATEGORIA
	 */
	protected static final int COLUMN_CATEGORIA_ID_CATEGORIA = 11;

	/** 
	 * Index of column CATALOGO_ID_CATALOGO
	 */
	protected static final int COLUMN_CATALOGO_ID_CATALOGO = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID_PRODUCTO
	 */
	protected static final int PK_COLUMN_ID_PRODUCTO = 1;

	/** 
	 * Inserts a new row in the producto table.
	 */
	public ProductoPk insert(Producto dto) throws ProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getIdProducto() );
			stmt.setString( index++, dto.getNombreProducto() );
			stmt.setDouble( index++, dto.getPrecio() );
			super.setBlobColumn(stmt, index++, dto.getImagen() );
			if (dto.isCantidadNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getCantidad() );
			}
		
			stmt.setShort( index++, dto.getActivo() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setString( index++, dto.getUsuarioCreacion() );
			stmt.setTimestamp(index++, dto.getFechaUltimaModificacion()==null ? null : new java.sql.Timestamp( dto.getFechaUltimaModificacion().getTime() ) );
			stmt.setString( index++, dto.getUsuarioUltimaModificacion() );
			stmt.setInt( index++, dto.getCategoriaIdCategoria() );
			stmt.setInt( index++, dto.getCatalogoIdCatalogo() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the producto table.
	 */
	public void update(ProductoPk pk, Producto dto) throws ProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getIdProducto() );
			stmt.setString( index++, dto.getNombreProducto() );
			stmt.setDouble( index++, dto.getPrecio() );
			super.setBlobColumn(stmt, index++, dto.getImagen() );
			if (dto.isCantidadNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getCantidad() );
			}
		
			stmt.setShort( index++, dto.getActivo() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setString( index++, dto.getUsuarioCreacion() );
			stmt.setTimestamp(index++, dto.getFechaUltimaModificacion()==null ? null : new java.sql.Timestamp( dto.getFechaUltimaModificacion().getTime() ) );
			stmt.setString( index++, dto.getUsuarioUltimaModificacion() );
			stmt.setInt( index++, dto.getCategoriaIdCategoria() );
			stmt.setInt( index++, dto.getCatalogoIdCatalogo() );
			stmt.setString( 13, pk.getIdProducto() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the producto table.
	 */
	public void delete(ProductoPk pk) throws ProductoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getIdProducto() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the producto table that matches the specified primary-key value.
	 */
	public Producto findByPrimaryKey(ProductoPk pk) throws ProductoDaoException
	{
		return findByPrimaryKey( pk.getIdProducto() );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'ID_PRODUCTO = :idProducto'.
	 */
	public Producto findByPrimaryKey(String idProducto) throws ProductoDaoException
	{
		Producto ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_PRODUCTO = ?", new Object[] { idProducto } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the producto table that match the criteria ''.
	 */
	public Producto[] findAll() throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_PRODUCTO", null );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'CATEGORIA_ID_CATEGORIA = :categoriaIdCategoria'.
	 */
	public Producto[] findByCategoria(int categoriaIdCategoria) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CATEGORIA_ID_CATEGORIA = ?", new Object[] {  new Integer(categoriaIdCategoria) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'CATALOGO_ID_CATALOGO = :catalogoIdCatalogo'.
	 */
	public Producto[] findByCatalogo(int catalogoIdCatalogo) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CATALOGO_ID_CATALOGO = ?", new Object[] {  new Integer(catalogoIdCatalogo) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'ID_PRODUCTO = :idProducto'.
	 */
	public Producto[] findWhereIdProductoEquals(String idProducto) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PRODUCTO = ? ORDER BY ID_PRODUCTO", new Object[] { idProducto } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'NOMBRE_PRODUCTO = :nombreProducto'.
	 */
	public Producto[] findWhereNombreProductoEquals(String nombreProducto) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_PRODUCTO = ? ORDER BY NOMBRE_PRODUCTO", new Object[] { nombreProducto } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'PRECIO = :precio'.
	 */
	public Producto[] findWherePrecioEquals(double precio) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO = ? ORDER BY PRECIO", new Object[] {  new Double(precio) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'IMAGEN = :imagen'.
	 */
	public Producto[] findWhereImagenEquals(byte[] imagen) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMAGEN = ? ORDER BY IMAGEN", new Object[] { imagen } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public Producto[] findWhereCantidadEquals(float cantidad) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Float(cantidad) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'ACTIVO = :activo'.
	 */
	public Producto[] findWhereActivoEquals(short activo) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVO = ? ORDER BY ACTIVO", new Object[] {  new Short(activo) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'FECHA_CREACION = :fechaCreacion'.
	 */
	public Producto[] findWhereFechaCreacionEquals(Date fechaCreacion) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_CREACION = ? ORDER BY FECHA_CREACION", new Object[] { fechaCreacion==null ? null : new java.sql.Timestamp( fechaCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'USUARIO_CREACION = :usuarioCreacion'.
	 */
	public Producto[] findWhereUsuarioCreacionEquals(String usuarioCreacion) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIO_CREACION = ? ORDER BY USUARIO_CREACION", new Object[] { usuarioCreacion } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'FECHA_ULTIMA_MODIFICACION = :fechaUltimaModificacion'.
	 */
	public Producto[] findWhereFechaUltimaModificacionEquals(Date fechaUltimaModificacion) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ULTIMA_MODIFICACION = ? ORDER BY FECHA_ULTIMA_MODIFICACION", new Object[] { fechaUltimaModificacion==null ? null : new java.sql.Timestamp( fechaUltimaModificacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'USUARIO_ULTIMA_MODIFICACION = :usuarioUltimaModificacion'.
	 */
	public Producto[] findWhereUsuarioUltimaModificacionEquals(String usuarioUltimaModificacion) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIO_ULTIMA_MODIFICACION = ? ORDER BY USUARIO_ULTIMA_MODIFICACION", new Object[] { usuarioUltimaModificacion } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'CATEGORIA_ID_CATEGORIA = :categoriaIdCategoria'.
	 */
	public Producto[] findWhereCategoriaIdCategoriaEquals(int categoriaIdCategoria) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CATEGORIA_ID_CATEGORIA = ? ORDER BY CATEGORIA_ID_CATEGORIA", new Object[] {  new Integer(categoriaIdCategoria) } );
	}

	/** 
	 * Returns all rows from the producto table that match the criteria 'CATALOGO_ID_CATALOGO = :catalogoIdCatalogo'.
	 */
	public Producto[] findWhereCatalogoIdCatalogoEquals(int catalogoIdCatalogo) throws ProductoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CATALOGO_ID_CATALOGO = ? ORDER BY CATALOGO_ID_CATALOGO", new Object[] {  new Integer(catalogoIdCatalogo) } );
	}

	/**
	 * Method 'ProductoDaoImpl'
	 * 
	 */
	public ProductoDaoImpl()
	{
	}

	/**
	 * Method 'ProductoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProductoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "onlineshop.producto";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Producto fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Producto dto = new Producto();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Producto[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Producto dto = new Producto();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Producto ret[] = new Producto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Producto dto, ResultSet rs) throws SQLException
	{
		dto.setIdProducto( rs.getString( COLUMN_ID_PRODUCTO ) );
		dto.setNombreProducto( rs.getString( COLUMN_NOMBRE_PRODUCTO ) );
		dto.setPrecio( rs.getDouble( COLUMN_PRECIO ) );
		dto.setImagen( super.getBlobColumn(rs, COLUMN_IMAGEN ) );
		dto.setCantidad( rs.getFloat( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setActivo( rs.getShort( COLUMN_ACTIVO ) );
		dto.setFechaCreacion( rs.getTimestamp(COLUMN_FECHA_CREACION ) );
		dto.setUsuarioCreacion( rs.getString( COLUMN_USUARIO_CREACION ) );
		dto.setFechaUltimaModificacion( rs.getTimestamp(COLUMN_FECHA_ULTIMA_MODIFICACION ) );
		dto.setUsuarioUltimaModificacion( rs.getString( COLUMN_USUARIO_ULTIMA_MODIFICACION ) );
		dto.setCategoriaIdCategoria( rs.getInt( COLUMN_CATEGORIA_ID_CATEGORIA ) );
		dto.setCatalogoIdCatalogo( rs.getInt( COLUMN_CATALOGO_ID_CATALOGO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Producto dto)
	{
	}

	/** 
	 * Returns all rows from the producto table that match the specified arbitrary SQL statement
	 */
	public Producto[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProductoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the producto table that match the specified arbitrary SQL statement
	 */
	public Producto[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProductoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProductoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
