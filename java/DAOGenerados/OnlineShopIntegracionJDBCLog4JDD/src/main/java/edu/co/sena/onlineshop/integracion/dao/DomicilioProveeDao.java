/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.onlineshop.integracion.dao;

import edu.co.sena.onlineshop.integracion.dto.*;
import edu.co.sena.onlineshop.integracion.exceptions.*;

public interface DomicilioProveeDao
{
	/** 
	 * Inserts a new row in the domicilio_provee table.
	 */
	public DomicilioProveePk insert(DomicilioProvee dto) throws DomicilioProveeDaoException;

	/** 
	 * Updates a single row in the domicilio_provee table.
	 */
	public void update(DomicilioProveePk pk, DomicilioProvee dto) throws DomicilioProveeDaoException;

	/** 
	 * Deletes a single row in the domicilio_provee table.
	 */
	public void delete(DomicilioProveePk pk) throws DomicilioProveeDaoException;

	/** 
	 * Returns the rows from the domicilio_provee table that matches the specified primary-key value.
	 */
	public DomicilioProvee findByPrimaryKey(DomicilioProveePk pk) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'PROVEEDOR_TIPO_DOCUMENTO = :proveedorTipoDocumento AND PROVEEDOR_NUM_DOCUMENTO = :proveedorNumDocumento'.
	 */
	public DomicilioProvee findByPrimaryKey(String proveedorTipoDocumento, String proveedorNumDocumento) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria ''.
	 */
	public DomicilioProvee[] findAll() throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'MUNICIPIO_idMUNICIPIO = :municipioIdmunicipio'.
	 */
	public DomicilioProvee[] findByMunicipio(int municipioIdmunicipio) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'PROVEEDOR_TIPO_DOCUMENTO = :proveedorTipoDocumento AND PROVEEDOR_NUM_DOCUMENTO = :proveedorNumDocumento'.
	 */
	public DomicilioProvee[] findByProveedor(String proveedorTipoDocumento, String proveedorNumDocumento) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'direccion = :direccion'.
	 */
	public DomicilioProvee[] findWhereDireccionEquals(String direccion) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'telefono = :telefono'.
	 */
	public DomicilioProvee[] findWhereTelefonoEquals(String telefono) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'barrio = :barrio'.
	 */
	public DomicilioProvee[] findWhereBarrioEquals(String barrio) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'localidad = :localidad'.
	 */
	public DomicilioProvee[] findWhereLocalidadEquals(String localidad) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'CORREO_POSTAL = :correoPostal'.
	 */
	public DomicilioProvee[] findWhereCorreoPostalEquals(String correoPostal) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'MUNICIPIO_idMUNICIPIO = :municipioIdmunicipio'.
	 */
	public DomicilioProvee[] findWhereMunicipioIdmunicipioEquals(int municipioIdmunicipio) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'PROVEEDOR_TIPO_DOCUMENTO = :proveedorTipoDocumento'.
	 */
	public DomicilioProvee[] findWhereProveedorTipoDocumentoEquals(String proveedorTipoDocumento) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the criteria 'PROVEEDOR_NUM_DOCUMENTO = :proveedorNumDocumento'.
	 */
	public DomicilioProvee[] findWhereProveedorNumDocumentoEquals(String proveedorNumDocumento) throws DomicilioProveeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the domicilio_provee table that match the specified arbitrary SQL statement
	 */
	public DomicilioProvee[] findByDynamicSelect(String sql, Object[] sqlParams) throws DomicilioProveeDaoException;

	/** 
	 * Returns all rows from the domicilio_provee table that match the specified arbitrary SQL statement
	 */
	public DomicilioProvee[] findByDynamicWhere(String sql, Object[] sqlParams) throws DomicilioProveeDaoException;

}
