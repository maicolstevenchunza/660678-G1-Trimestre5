/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.onlineshop.integracion.jdbc;

import edu.co.sena.onlineshop.integracion.dao.*;
import edu.co.sena.onlineshop.integracion.factory.*;
import edu.co.sena.onlineshop.integracion.dto.*;
import edu.co.sena.onlineshop.integracion.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PagoDaoImpl extends AbstractDAO implements PagoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT FACTURA_ID_FACTURA, tipo_pago, nume_cuenta, numero_targeta FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( FACTURA_ID_FACTURA, tipo_pago, nume_cuenta, numero_targeta ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET FACTURA_ID_FACTURA = ?, tipo_pago = ?, nume_cuenta = ?, numero_targeta = ? WHERE FACTURA_ID_FACTURA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE FACTURA_ID_FACTURA = ?";

	/** 
	 * Index of column FACTURA_ID_FACTURA
	 */
	protected static final int COLUMN_FACTURA_ID_FACTURA = 1;

	/** 
	 * Index of column tipo_pago
	 */
	protected static final int COLUMN_TIPO_PAGO = 2;

	/** 
	 * Index of column nume_cuenta
	 */
	protected static final int COLUMN_NUME_CUENTA = 3;

	/** 
	 * Index of column numero_targeta
	 */
	protected static final int COLUMN_NUMERO_TARGETA = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Index of primary-key column FACTURA_ID_FACTURA
	 */
	protected static final int PK_COLUMN_FACTURA_ID_FACTURA = 1;

	/** 
	 * Inserts a new row in the pago table.
	 */
	public PagoPk insert(Pago dto) throws PagoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isFacturaIdFacturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FACTURA_ID_FACTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTipoPagoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "tipo_pago" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeCuentaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "nume_cuenta" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroTargetaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "numero_targeta" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isFacturaIdFacturaModified()) {
				stmt.setInt( index++, dto.getFacturaIdFactura() );
			}
		
			if (dto.isTipoPagoModified()) {
				stmt.setString( index++, dto.getTipoPago() );
			}
		
			if (dto.isNumeCuentaModified()) {
				stmt.setString( index++, dto.getNumeCuenta() );
			}
		
			if (dto.isNumeroTargetaModified()) {
				if (dto.isNumeroTargetaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getNumeroTargeta() );
				}
		
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PagoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the pago table.
	 */
	public void update(PagoPk pk, Pago dto) throws PagoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isFacturaIdFacturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FACTURA_ID_FACTURA=?" );
				modified=true;
			}
		
			if (dto.isTipoPagoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "tipo_pago=?" );
				modified=true;
			}
		
			if (dto.isNumeCuentaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "nume_cuenta=?" );
				modified=true;
			}
		
			if (dto.isNumeroTargetaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "numero_targeta=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE FACTURA_ID_FACTURA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isFacturaIdFacturaModified()) {
				stmt.setInt( index++, dto.getFacturaIdFactura() );
			}
		
			if (dto.isTipoPagoModified()) {
				stmt.setString( index++, dto.getTipoPago() );
			}
		
			if (dto.isNumeCuentaModified()) {
				stmt.setString( index++, dto.getNumeCuenta() );
			}
		
			if (dto.isNumeroTargetaModified()) {
				if (dto.isNumeroTargetaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getNumeroTargeta() );
				}
		
			}
		
			stmt.setInt( index++, pk.getFacturaIdFactura() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PagoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the pago table.
	 */
	public void delete(PagoPk pk) throws PagoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getFacturaIdFactura() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PagoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the pago table that matches the specified primary-key value.
	 */
	public Pago findByPrimaryKey(PagoPk pk) throws PagoDaoException
	{
		return findByPrimaryKey( pk.getFacturaIdFactura() );
	}

	/** 
	 * Returns all rows from the pago table that match the criteria 'FACTURA_ID_FACTURA = :facturaIdFactura'.
	 */
	public Pago findByPrimaryKey(int facturaIdFactura) throws PagoDaoException
	{
		Pago ret[] = findByDynamicSelect( SQL_SELECT + " WHERE FACTURA_ID_FACTURA = ?", new Object[] {  new Integer(facturaIdFactura) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the pago table that match the criteria ''.
	 */
	public Pago[] findAll() throws PagoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY FACTURA_ID_FACTURA", null );
	}

	/** 
	 * Returns all rows from the pago table that match the criteria 'FACTURA_ID_FACTURA = :facturaIdFactura'.
	 */
	public Pago[] findByFactura(int facturaIdFactura) throws PagoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FACTURA_ID_FACTURA = ?", new Object[] {  new Integer(facturaIdFactura) } );
	}

	/** 
	 * Returns all rows from the pago table that match the criteria 'FACTURA_ID_FACTURA = :facturaIdFactura'.
	 */
	public Pago[] findWhereFacturaIdFacturaEquals(int facturaIdFactura) throws PagoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FACTURA_ID_FACTURA = ? ORDER BY FACTURA_ID_FACTURA", new Object[] {  new Integer(facturaIdFactura) } );
	}

	/** 
	 * Returns all rows from the pago table that match the criteria 'tipo_pago = :tipoPago'.
	 */
	public Pago[] findWhereTipoPagoEquals(String tipoPago) throws PagoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo_pago = ? ORDER BY tipo_pago", new Object[] { tipoPago } );
	}

	/** 
	 * Returns all rows from the pago table that match the criteria 'nume_cuenta = :numeCuenta'.
	 */
	public Pago[] findWhereNumeCuentaEquals(String numeCuenta) throws PagoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nume_cuenta = ? ORDER BY nume_cuenta", new Object[] { numeCuenta } );
	}

	/** 
	 * Returns all rows from the pago table that match the criteria 'numero_targeta = :numeroTargeta'.
	 */
	public Pago[] findWhereNumeroTargetaEquals(int numeroTargeta) throws PagoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE numero_targeta = ? ORDER BY numero_targeta", new Object[] {  new Integer(numeroTargeta) } );
	}

	/**
	 * Method 'PagoDaoImpl'
	 * 
	 */
	public PagoDaoImpl()
	{
	}

	/**
	 * Method 'PagoDaoImpl'
	 * 
	 * @param userConn
	 */
	public PagoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "onlineshop.pago";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Pago fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Pago dto = new Pago();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Pago[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Pago dto = new Pago();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Pago ret[] = new Pago[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Pago dto, ResultSet rs) throws SQLException
	{
		dto.setFacturaIdFactura( rs.getInt( COLUMN_FACTURA_ID_FACTURA ) );
		dto.setTipoPago( rs.getString( COLUMN_TIPO_PAGO ) );
		dto.setNumeCuenta( rs.getString( COLUMN_NUME_CUENTA ) );
		dto.setNumeroTargeta( rs.getInt( COLUMN_NUMERO_TARGETA ) );
		if (rs.wasNull()) {
			dto.setNumeroTargetaNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Pago dto)
	{
		dto.setFacturaIdFacturaModified( false );
		dto.setTipoPagoModified( false );
		dto.setNumeCuentaModified( false );
		dto.setNumeroTargetaModified( false );
	}

	/** 
	 * Returns all rows from the pago table that match the specified arbitrary SQL statement
	 */
	public Pago[] findByDynamicSelect(String sql, Object[] sqlParams) throws PagoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PagoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the pago table that match the specified arbitrary SQL statement
	 */
	public Pago[] findByDynamicWhere(String sql, Object[] sqlParams) throws PagoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PagoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
